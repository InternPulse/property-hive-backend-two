generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DSN")
}
model User {
  id               String         @id @default(uuid())
  email            String         @unique
  firstName        String         @map("fname") // Renamed for clarity
  lastName         String         @map("lname") // Renamed for clarity
  businessName     String         @unique @map("business_name") // Using camelCase for consistency
  phoneNumber      String?        @unique @map("phone_number") // Using camelCase for consistency
  profilePicture    String?       @map("profile_picture") // Using camelCase for consistency
  customUrl        String?        @map("custom_url") // Using camelCase for consistency
  isCompany        Boolean        @default(false) @map("is_company") // Using camelCase for consistency
  isActive         Boolean        @default(true) @map("is_active") // Using camelCase for consistency
  isStaff          Boolean        @default(false) @map("is_staff") // Using camelCase for consistency
  isSuperuser      Boolean        @default(false) @map("is_superuser") // Using camelCase for consistency
  dateJoined       DateTime       @default(now()) @map("date_joined") // Using camelCase for consistency
  lastLogin        DateTime?      @map("last_login") // Using camelCase for consistency
  updatedAt        DateTime       @updatedAt @map("updated_at") // Using camelCase for consistency
  kycDocuments     KycDocuments[] 
  properties       Property[]
  soldProperties    SoldProperties[]
  userProperties   UserProperties[]
  transactions     Transactions[]
  ratings          Ratings[]
  profile          Profile?

  @@map("users")
}


model KycDocuments {
  id            String    @id @default(uuid())
  userid        User      @relation(fields: [userId], references: [id])
  userId        String
  document_type String?
  document_file String?
  status        String    @default("pending")
  uploaded_at   DateTime  @default(now())

  @@map("kyc_documents")
}

model Property {
  id                Int             @id @default(autoincrement())
  seller            User            @relation(fields: [sellerId], references: [id])
  sellerId          String
  name              String
  state             String
  city              String
  address           String
  description       String
  squaremeters      String         
  property_type     String
  price             Int
  is_sold           Boolean         @default(false)
  date_sold         DateTime?
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  propertyImages    PropertyImages[]
  propertyDocuments PropertyDocuments[]
  soldProperties    SoldProperties[]
  userProperties    UserProperties[]
  transactions      Transactions[]
  ratings           Ratings[]

  @@map("properties")
}


model PropertyImages {
  id          String   @id @default(uuid())
  property    Property  @relation(fields: [propertyId], references: [id])
  propertyId  Int
  img         String?

  @@map("property_images")
}

model PropertyDocuments {
  id          String   @id @default(uuid())
  property    Property  @relation(fields: [propertyId], references: [id])
  propertyId  Int
  document_type String?
  img         String?
  file_path   String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@map("property_documents")
}

model SoldProperties {
  id          String   @id @default(uuid())
  buyer       User     @relation(fields: [buyerId], references: [id])
  buyerId     String
  property    Property  @relation(fields: [propertyId], references: [id])
  propertyId  Int
  date_sold   DateTime  @default(now())

  @@map("sold_properties")
}

model UserProperties {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  property    Property  @relation(fields: [propertyId], references: [id])
  propertyId  Int
  date_purchased DateTime @default(now())

  @@map("user_properties")
}

model Transactions {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  property    Property  @relation(fields: [propertyId], references: [id])
  propertyId  Int
  status      String    @default("P") // "P" for Pending, "A" for Approved, "F" for Failed
  payment_method String
  total_amount Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  invoices    Invoice[]

  @@map("transactions")
}

model Invoice {
  id          String   @id @default(uuid())
  transaction Transactions @relation(fields: [transactionId], references: [id])
  transactionId String
  payment_status String
  payment_method String
  note         String?
  issue_date   DateTime  @default(now())

  @@map("invoices")
}

model Ratings {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  property    Property  @relation(fields: [propertyId], references: [id])
  propertyId  Int
  comment     String?
  rate        Int       @default(1)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@map("ratings")
}

model Profile {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  company_logo   String?
  company_banner String?
  company_address String?
  title          String?
  description    String
  instagram      String?
  linkedin       String?
  facebook       String?
  twitter        String?

  @@map("profiles")
}

