
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  Buyer
  Seller
  Agent
}

enum PropertyStatus {
  ForSale
  UnderContract
  Sold
}

enum TransactionStatus {
  success
  failed
  pending
}

// User Model
model User {
  id String @id @default(uuid())
  firstName String
  lastName String
  businessName String
  email String @unique
  phoneNumber String
  password String
  role Role
  profilePicture String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Rating Rating[]
  Property Property[]
  Transactions Transactions[]

  @@map("users") // Table name at the database
}


// Property Model
model Property  {
  id String @id @default(uuid())
  seller User @relation(fields: [sellerId], references: [id])
  sellerId String
  location String
  description String
  squaremeters Float
  propertyStatus PropertyStatus
  propertyType String
  price Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Rating Rating[]
  PropertyDocuments PropertyDocuments[]  
  Transactions Transactions[]

  @@map("properties") // Table name at the database
}

// Rating Model
model Rating {
  id String @id @default(uuid())
  rating Int
  comment String
  property Property @relation(fields: [propertyId], references: [id])
  propertyId String
  user User @relation(fields: [userId], references: [id])
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ratings") // Table name at the database
}


model PropertyDocuments {
  id String @id @default(uuid())
  property Property @relation(fields: [propertyId], references: [id])
  propertyId String
  documentType String
  filePath String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("propertyDocuments")
}

model Transactions {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  property Property @relation(fields: [propertyId], references: [id])
  propertyId String
  status TransactionStatus
  paymentMethod String
  totalAmount Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Invoice Invoice[]

  @@map("transactions")
}

model Invoice {
  id String @id @default(uuid())
  transaction Transactions @relation(fields: [transactionId], references: [id])
  transactionId String
  issueDate DateTime
  paymentStatus TransactionStatus
  amount Float
  dueDate DateTime
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}